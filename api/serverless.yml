
service: fullstory-sample-api
custom:
  feedbackTableName: Feedback-${self:provider.stage}
provider:
  name: aws
  runtime: nodejs8.10
  stage: ${opt:stage, 'v1'}
  region: us-east-1
  profile: personal-account-admin
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Scan
        - dynamodb:Query
        - dynamodb:PutItem
        - dynamodb:GetItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
        - dynamodb:BatchGetItem
        - dynamodb:BatchWriteItem
      Resource: arn:aws:dynamodb:${self:provider.region}:*:table/${self:custom.feedbackTableName}
    - Effect: Allow
      Action:
        - comprehend:DetectSentiment
      Resource: "*"
  environment:
    FEEDBACK_TABLE_NAME: ${self:custom.feedbackTableName}
    GITHUB_SIGNING_KEY: ${file(secrets_fullstory-feedback.yml):GITHUB_SIGNING_KEY}
    GITHUB_APP_ID: ${file(secrets_fullstory-feedback.yml):GITHUB_APP_ID}
    GITHUB_INSTALLATION_ID: ${file(secrets_fullstory-feedback.yml):GITHUB_INSTALLATION_ID}
functions:
  ping:
    handler: handler.ping
    events:
      - http:
          path: ping
          method: get
  saveFeedback:
    handler: handler.save
    events:
      - http:
          path: feedback
          method: post
          cors: true
  getFeedback:
    handler: handler.get
    events:
      - http:
          path: feedback
          method: get
          cors: true

resources:
  Resources:
    FeedbackTable:
      Type: AWS::DynamoDB::Table
      Properties:
        AttributeDefinitions:
          - AttributeName: sessionId
            AttributeType: S
          - AttributeName: date
            AttributeType: S
        ProvisionedThroughput:
          WriteCapacityUnits: 5
          ReadCapacityUnits: 5
        TableName: ${self:custom.feedbackTableName}
        KeySchema:
        - KeyType: HASH
          AttributeName: sessionId
        - KeyType: RANGE
          AttributeName: date

